/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Server.Controller;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;

/**
 * This class is the menu interface.
 *
 * @author sergi
 */
public final class Menu extends javax.swing.JFrame {

    private static final String ipServer = "192.168.100.13";
    private static final int portServer = 8000;

    private final String userName;
    private final boolean isAdmin;
    private final boolean auth;
    private final Controller controller;
    private final Socket socket;

    String[] songExtensions = {"aac", "aiff", "flac", "mid", "midi", "mp3",
        "ogg", "wav"};
    String[] videoExtensions = {"mp4", "avi", "mkv", "mov", "webm"};

    /**
     * Menu constructor.
     *
     * @param newUser
     * @param controller
     * @param isAdmin true if the client is administrator
     * @param auth
     */
    public Menu(String newUser, Controller controller, boolean isAdmin,
            boolean auth) {
        this.userName = newUser;
        this.isAdmin = isAdmin;
        this.auth = auth;
        this.controller = controller;
        this.socket = controller.getSocket();

        System.out.println("Socket compartido desde el login con Client: "
                + socket);
        System.out.println("Rol admin? " + isAdmin);
        if (socket == null) {

            System.err.println("El socket es nulo");
            return;
        }
        initComponents();
        initializeJavaFX();
        updateWelcomeMessage(newUser);

        filesList.getSelectionModel().addListSelectionListener(
                (ListSelectionEvent e) -> {
                    if (!e.getValueIsAdjusting()) {
                        // Obtiene la canción seleccionada
                        String selectedFile = filesList.getSelectedValue();
                        if (selectedFile != null) {

                            try {
                                String extension = selectedFile.substring(
                                        selectedFile.lastIndexOf(".") + 1);

                                String fileType = getFileType(extension);

                                downloadFile(selectedFile, fileType);

                                switch (fileType) {
                                    case "video":
                                        showVideoFrame(selectedFile);
                                        break;

                                    case "doc":
                                        showDocFrame(selectedFile);
                                        break;
                                    case "song":

                                        showSongFrame(selectedFile);
                                        break;
                                    default:
                                        throw new AssertionError();
                                }

                            } catch (Exception ex) {
                                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE,
                                        null, ex);
                            }

                        }
                    }
                });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        videoButton = new javax.swing.JButton();
        musicButton = new javax.swing.JButton();
        docButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        welcomeMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        videoButton.setBackground(new java.awt.Color(255, 204, 204));
        videoButton.setForeground(new java.awt.Color(51, 51, 51));
        videoButton.setText("Video");
        videoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoButtonActionPerformed(evt);
            }
        });

        musicButton.setBackground(new java.awt.Color(255, 204, 204));
        musicButton.setForeground(new java.awt.Color(51, 51, 51));
        musicButton.setText("Música");
        musicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicButtonActionPerformed(evt);
            }
        });

        docButton.setBackground(new java.awt.Color(255, 204, 204));
        docButton.setForeground(new java.awt.Color(51, 51, 51));
        docButton.setText("Documentos");
        docButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docButtonActionPerformed(evt);
            }
        });

        filesList.setBackground(new java.awt.Color(255, 234, 234));
        jScrollPane1.setViewportView(filesList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(videoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(musicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(docButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videoButton)
                    .addComponent(musicButton)
                    .addComponent(docButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MEK's SERVER");

        welcomeMessage.setFont(new java.awt.Font("Segoe Print", 0, 20)); // NOI18N
        welcomeMessage.setForeground(new java.awt.Color(102, 102, 102));
        welcomeMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeMessage.setText("mensaje bienvenida");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(welcomeMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(welcomeMessage)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Get the video list from server.
     *
     * @param evt
     */
    private void videoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoButtonActionPerformed
        try {
            controller.sendMessage("GV-" + isAdmin + "-" + auth);

            String response = controller.receiveMessage();

            ListModel<String> videos = serverResponse(response);

            filesList.setModel(videos);

            System.out.println("Lista de videos: " + videos);

        } catch (Exception e) {

        }
    }//GEN-LAST:event_videoButtonActionPerformed

    /**
     * Get the music list from server.
     *
     * @param evt
     */
    private void musicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicButtonActionPerformed
        try {
            controller.sendMessage("GM-" + isAdmin + "-" + auth);

            String response = controller.receiveMessage();

            ListModel<String> songs = serverResponse(response);

            filesList.setModel(songs);

            System.out.println("Lista de musica: " + songs);

        } catch (Exception e) {

        }
    }//GEN-LAST:event_musicButtonActionPerformed

    /**
     * Get the doc list from server.
     *
     * @param evt
     */
    private void docButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docButtonActionPerformed
        try {
            controller.sendMessage("GD-" + isAdmin + "-" + auth);

            String response = controller.receiveMessage();

            ListModel<String> docs = serverResponse(response);

            filesList.setModel(docs);

            System.out.println("Lista de archivos: " + docs);

        } catch (Exception e) {

        }
    }//GEN-LAST:event_docButtonActionPerformed

    /**
     * Create the file list to the interface.
     *
     * @param response Is the response from server.
     * @return ListModel<String> of archives.
     */
    private ListModel<String> serverResponse(String response) {
        // Procesar la respuesta del servidor y crear un modelo de lista
        DefaultListModel<String> nameFileListModel = new DefaultListModel<>();
        String[] filesArray = response.split(";");

        for (String file : filesArray) {
            if (file.equals("end list")) {
                break;
            }
            nameFileListModel.addElement(file);
        }

        return nameFileListModel;
    }

    /**
     * Get the type file requested.
     *
     * @param extension Is the requested file's extension-
     * @return Each file type.
     */
    private String getFileType(String extension) {
        for (String songExtension : songExtensions) {
            if (extension.equalsIgnoreCase(songExtension)) {
                return "song";
            }
        }
        for (String videoExtension : videoExtensions) {
            if (extension.equalsIgnoreCase(videoExtension)) {
                return "video";
            }
        }
        return "doc";

    }

    /**
     * This method sends a message for download fileName.
     *
     * @param fileName
     * @param fileType
     */
    private void downloadFile(String fileName, String fileType) {
        int waitTime = 500;

        if (auth) {
            try (Socket socket = new Socket(ipServer, portServer); PrintWriter outPut = new PrintWriter(socket.getOutputStream(),
                    true); BufferedReader inPut = new BufferedReader(new InputStreamReader(
                    socket.getInputStream())); OutputStream binaryOut = socket.getOutputStream(); InputStream binaryIn = socket.getInputStream();) {

                Controller controller = new Controller(socket, outPut, inPut,
                        binaryOut, binaryIn);

                controller.sendMessage("D_" + fileType + "_" + fileName + "_-"
                        + isAdmin + "-" + auth);
                controller.receiveFileFromServer("descargas/" + fileName);

            } catch (IOException e) {
                e.printStackTrace();
            }

        } else {
            System.err.println("El usuario no está autenticado.");
        }
        try {
            TimeUnit.MILLISECONDS.sleep(waitTime);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * Update the welcome message on menu interface.
     *
     * @param username
     */
    public void updateWelcomeMessage(String username) {

        String upWelcomeMessage = "Bienvenido a MEK, " + username + "!";
        welcomeMessage.setText(upWelcomeMessage);
    }

    /**
     * Initialize the javaFX
     */
    private void initializeJavaFX() {

        if (!Platform.isFxApplicationThread()) {
            Platform.startup(() -> {

            });
        }
    }

    /**
     * Initialize the docFrame.
     * @param selectedFile
     */
    private void showDocFrame(String selectedFile) {
        // Mostrar la interfaz para visualizar el archivo seleccionado
        docFrame docFrame = new docFrame(selectedFile);
        docFrame.setVisible(true);

    }

    /**
     * Initialize the videoFrame.
     * @param selectedFile
     */
    private void showVideoFrame(String selectedFile) {

        VideoFrame videoFrame = new VideoFrame(selectedFile);

        videoFrame.setVisible(true);
    }

    /**
     * Initialize the songFrame.
     * @param selectedFile
     */
    private void showSongFrame(String selectedFile) {

        SongFrame songFrame = new SongFrame(selectedFile);
        songFrame.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton docButton;
    private javax.swing.JList<String> filesList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton musicButton;
    private javax.swing.JButton videoButton;
    private javax.swing.JLabel welcomeMessage;
    // End of variables declaration//GEN-END:variables

}
